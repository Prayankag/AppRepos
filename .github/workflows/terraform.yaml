name: Terraform Deployment with Unit Test Task

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  pull_request:
    branches:
      - main  # Trigger on PR to main branch

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/terraform/modules/webapp  # Define the TF_WORKING_DIR here
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      GO_VERSION: '1.19.0'  # Specify the Go version (as in your variables)
      TF_VERSION: '1.3.5'  # Specify the Terraform version (as in your variables)

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: List the contents of the working directory (to check paths and files)
    - name: List Working Directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al $GITHUB_WORKSPACE

    # Step 3: Set up Azure CLI
    - name: Set up Azure CLI
      uses: azure/setup-azure-cli@v1  # Correct action for setting up Azure CLI

    - name: Login to Azure
      run: |
        echo "Logging in to Azure..."
        az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"

    # Step 4: Set up Go
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    # Step 5: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step 6: Initialize Terraform
    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade

    # Step 7: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} validate

    # Step 8: Run Unit Tests using Go with Terratest
    - name: Run Unit Tests with Terratest
      run: |
        echo "Running Unit Tests with Terratest"
        cd ${{ env.TF_WORKING_DIR }}
        export TF_VAR_ENV="${{ github.event.inputs.environment }}"

        # Initialize Go module if not already initialized
        if [ ! -f "go.mod" ]; then
          echo "Initializing Go module..."
          go mod init $(basename ${{ env.TF_WORKING_DIR }})
        else
          echo "go.mod already exists, skipping initialization."
        fi

        # Install dependencies
        echo "Installing Go dependencies..."
        if ! go list -m github.com/gruntwork-io/terratest/modules/terraform > /dev/null 2>&1; then
          echo "Dependency not found, fetching..."
          go get github.com/gruntwork-io/terratest/modules/terraform
        else
          echo "Dependency already exists, skipping download..."
        fi
        
        go mod tidy
        go test -v

    # Step 9: Terraform Plan with environment-specific variables
    - name: Terraform Plan
      run: |
        echo "Running Terraform Plan with environment-specific tfvars..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} plan -out=tfplan -var-file=${{ env.TF_WORKING_DIR }}/../../environments/${{ github.event.inputs.environment }}/terraform.tfvars

    # Step 10: Apply Terraform Plan (auto-approve for CI/CD)
    - name: Terraform Apply
      run: |
        echo "Applying Terraform Plan..."
        terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve tfplan

    # Step 11: Remove terraform.lock file after apply
    - name: Remove terraform.lock.hcl
      run: |
        echo "Removing terraform.lock.hcl after applying..."
        rm -f ${{ env.TF_WORKING_DIR }}/terraform.lock.hcl
