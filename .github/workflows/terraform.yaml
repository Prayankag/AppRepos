name: Terraform Deployment with Unit Test Task

on:
  push:
    branches:
      - main  # Trigger on push to main branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (e.g., dev, prod)'
        required: false
        default: 'dev'  # Default value for environment input

jobs:
  terraform-deployment:
    runs-on: ubuntu-latest

    env:
      TF_WORKING_DIR: ${{ github.workspace }}/terraform/modules/webapp
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      GO_VERSION: '1.21.0'
      TF_VERSION: '1.3.5'


    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3
      
    # Step 2: List the contents of the working directory (to check paths and files)
    - name: List Working Directory
      run: |
        echo "Listing the contents of the working directory..."
        ls -al $GITHUB_WORKSPACE
        echo "TF_WORKING_DIR is: $TF_WORKING_DIR"
        
    # Step 3: Set up Azure Login using Service Principal
    - name: Setup Azure Login using Service Principal
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}  # Service Principal credentials in JSON format

    # Step 4: Set up Go
    - name: Set up Go ${{ env.GO_VERSION }}
      uses: actions/setup-go@v3
      with:
        go-version: ${{ env.GO_VERSION }}

    # Step 5: Install Terraform
    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Step: Clean Go cache (to resolve dependency issues)
    - name: Clean Go Cache
      run: |
        echo "Cleaning Go Cache..."
        go clean -modcache

    # Step 6: Initialize Terraform
    - name: Terraform Init
      run: |
        echo "Initializing Terraform..."
        #terraform -chdir=${{ env.TF_WORKING_DIR }} init -upgrade
        cd ${{ github.workspace }}/terraform/modules/webapp  # Navigate to the correct directory
        terraform init -upgrade

    # Step 7: Validate Terraform configuration
    - name: Terraform Validate
      run: |
        echo "Validating Terraform configuration..."
        #terraform -chdir=${{ env.TF_WORKING_DIR }} validate
        cd ${{ github.workspace }}/terraform/modules/webapp  # Navigate to the correct directory
        terraform validate

    # Step 8: Run Unit Tests using Go with Terratest
    - name: Run Unit Tests with Terratest
      run: |
        echo "Running Unit Tests with Terratest"
        # cd ${{ env.TF_WORKING_DIR }}
        # export TF_VAR_ENV="${{ github.event.inputs.environment }}"  # Set environment-specific variable
        cd ${{ github.workspace }}/terraform/modules/webapp  # Navigate to the correct directory
        export TF_VAR_ENV="${{ github.event.inputs.environment }}"

        # Initialize Go module if not already initialized
        if [ ! -f "go.mod" ]; then
          echo "Initializing Go module..."
          #go mod init $(basename ${{ env.TF_WORKING_DIR }})
          go mod init $(basename ${{ github.workspace }}/terraform/modules/webapp)
        else
          echo "go.mod already exists, skipping initialization."
        fi

        # Install dependencies
        echo "Installing Go dependencies..."
        if ! go list -m github.com/gruntwork-io/terratest/modules/terraform > /dev/null 2>&1; then
          echo "Dependency not found, fetching..."
          go get github.com/gruntwork-io/terratest/modules/terraform
        else
          echo "Dependency already exists, skipping download..."
        fi
        
        # Explicitly install golang.org/x/crypto
        go get golang.org/x/crypto
        
        go mod tidy
        go test -v

    # # Step 9: Terraform Plan with environment-specific variables
    # - name: Terraform Plan
    #   run: |
    #     echo "Running Terraform Plan with environment-specific tfvars..."
    #     terraform -chdir=${{ env.TF_WORKING_DIR }} plan -out=tfplan -var-file=${{ env.TF_WORKING_DIR }}/../../environments/${{ github.event.inputs.environment }}/terraform.tfvars
    # Step 9: Terraform Plan with environment-specific variables
    - name: Terraform Plan
      run: |
        echo "Running Terraform Plan with environment-specific tfvars..."
        
        # Check if environment is provided
        if [ -z "${{ github.event.inputs.environment }}" ]; then
          echo "No environment provided, using default tfvars file"
          ENV_TFVARS="environments/default/terraform.tfvars"  # Use default if no environment
        else
          ENV_TFVARS="environments/${{ github.event.inputs.environment }}/terraform.tfvars"
        fi
        
        echo "Using tfvars file: ${ENV_TFVARS}"
        
        # Run the terraform plan with the correct tfvars file
        cd ${{ github.workspace }}/terraform/modules/webapp  # Navigate to the correct directory
        terraform plan -out=tfplan -var-file=${{ github.workspace }}/${ENV_TFVARS}
        #terraform -chdir=${{ env.TF_WORKING_DIR }} plan -out=tfplan -var-file=${{ env.TF_WORKING_DIR }}/${ENV_TFVARS}

    # Step 10: Terraform Apply (auto-approve for CI/CD)
    - name: Terraform Apply
      run: |
        echo "Applying Terraform Plan..."

        # Check if environment is provided
        if [ -z "${{ github.event.inputs.environment }}" ]; then
          echo "No environment provided, using default tfvars file"
          ENV_TFVARS="environments/default/terraform.tfvars"  # Use default if no environment
        else
          ENV_TFVARS="environments/${{ github.event.inputs.environment }}/terraform.tfvars"
        fi
        
        echo "Using tfvars file: ${ENV_TFVARS}"

        # Apply Terraform Plan with the correct tfvars file
        cd ${{ github.workspace }}/terraform/modules/webapp  # Ensure we're in the correct working directory
        terraform apply -auto-approve -var-file=${{ github.workspace }}/${ENV_TFVARS}

    # Step 11: Remove terraform.lock file after apply
    - name: Remove terraform.lock.hcl
      run: |
        echo "Removing terraform.lock.hcl after applying..."
        cd ${{ github.workspace }}/terraform/modules/webapp  # Navigate to the correct directory
        rm -f terraform.lock.hcl
