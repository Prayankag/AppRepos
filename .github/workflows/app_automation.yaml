name: Create pipeline in application repo

on:
  workflow_dispatch:
    inputs:
      orgname:
        description: 'The name of the organization repository'
        required: true
        type: string
      targetrepo:
        description: 'The name of the target repository for triggering workflows'
        required: true
        type: string
      applicationtype:
        description: 'The Application type for deployment (dotnet, springboot, terraform)'
        required: true
        type: string
      appname:
        description: 'The Azure Web App name for deployment'
        required: true
        type: string

jobs:
  trigger-workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Create target repository if it doesn't exist
        run: |
          echo "Checking if the repository ${{ github.event.inputs.targetrepo }} exists in ${{ github.event.inputs.orgname }}..."
          
          repo_exists=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/user/repos)
          
          if [ "$repo_exists" != "200" ]; then
            echo "Repository doesn't exist. Creating new repository..."
            response=$(curl -s -w "%{http_code}" -o response.json -X POST https://api.github.com/user/repos \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -d '{
              "name": "${{ github.event.inputs.targetrepo }}",
              "description": "This is your target repository",
              "homepage": "https://github.com",
              "private": false,
              "has_issues": false,
              "has_projects": false,
              "has_wiki": false
            }')
      
            echo "Response Code: $response"
            echo "Response Body:"
            cat response.json
            
            if [ "$response" -eq "201" ]; then
              echo "Repository ${{ github.event.inputs.targetrepo }} created successfully."
            else
              echo "Failed to create repository. Please check the error details."
              cat response.json
            fi
          else
            echo "Repository ${{ github.event.inputs.targetrepo }} already exists."
          fi

      - name: Checkout AppRepos
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.orgname }}/AppRepos
          token: ${{ secrets.GIT_PAT }}  # Personal Access Token (PAT)
          ref: main

      - name: Clone the target repository
        run: |
          git --version
          git clone https://github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git
          cd ${{ github.event.inputs.targetrepo }}
          echo "Contents of the cloned repository:"
          ls -R .

      - name: List files in the app repo
        run: |
          echo "Listing files in the app repo"
          ls -R .

      - name: List files in the app repo's workflows directory
        run: |
          echo "Listing files in the app repo's workflows directory"
          ls -R ${{ github.event.inputs.targetrepo }}/.github/workflows || echo "Directory not found"

      - name: Create .github/workflows directory in app repo if it doesn't exist
        run: |
          if [ ! -d "${{ github.event.inputs.targetrepo }}/.github/workflows" ]; then
            echo "Creating .github/workflows directory."
            mkdir -p ${{ github.event.inputs.targetrepo }}/.github/workflows
          fi

      - name: Check if the required YAML file exists in the app repo
        run: |
          echo "Checking for ${{ github.event.inputs.applicationtype }}.yaml"
          if [ ! -f ".github/workflows/${{ github.event.inputs.applicationtype }}.yaml" ]; then
            echo "Error: ${{ github.event.inputs.applicationtype }}.yaml does not exist in the app repo!"
            exit 1
          fi

      - name: Copy the application workflow YAML file to app repo
        run: |
          echo "Copying the application workflow YAML to the app repo."
          cp .github/workflows/${{ github.event.inputs.applicationtype }}.yaml ${{ github.event.inputs.targetrepo }}/.github/workflows/
          git diff --exit-code || echo "Changes detected, committing."
          
          cd ${{ github.event.inputs.targetrepo }}
          git config --global user.email "naresh.reddivari@valuemomentum.com"
          git config --global user.name "nareshreddivari"
          git add .github/workflows/${{ github.event.inputs.applicationtype }}.yaml
          git diff --cached --quiet || git commit -m "Added ${{ github.event.inputs.applicationtype }}.yaml from App repo"
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

      - name: Copy application code to the app repo (based on application type)
        run: |
          if [ "${{ github.event.inputs.applicationtype }}" == "dotnet" ]; then
            echo "Copying .NET (calculator) code to the app repo."
            echo "Current directory:"
            pwd
            echo "Listing contents of the current directory:"
            ls -l
            cd $GITHUB_WORKSPACE
            if [ -d "./calculator" ]; then
              echo "Listing contents of the calculator folder (before copy):"
              mkdir -p ${{ github.event.inputs.targetrepo }}/calculator
              ls -l ./calculator
              cp -r ./calculator/* ${{ github.event.inputs.targetrepo }}/calculator/
            else
              echo "calculator folder does not exist in the expected location. Skipping copy."
            fi
            if [ -f "./calculator.sln" ]; then
              echo "calculator.sln file exists, copying to app repo."
              cp ./calculator.sln ${{ github.event.inputs.targetrepo }}/calculator.sln
            else
              echo "calculator.sln file does not exist, skipping copy."
            fi
          elif [ "${{ github.event.inputs.applicationtype }}" == "springboot" ]; then
            echo "Copying Spring Boot code to the app repo."
            cd $GITHUB_WORKSPACE
            mkdir -p ${{ github.event.inputs.targetrepo }}/springboot
            cp -r ./springboot/* ${{ github.event.inputs.targetrepo }}/springboot/
          elif [ "${{ github.event.inputs.applicationtype }}" == "terraform" ]; then
            echo "Copying Terraform code to the app repo."
            cd $GITHUB_WORKSPACE
            mkdir -p ${{ github.event.inputs.targetrepo }}/terraform
            cp -r ./terraform/* ${{ github.event.inputs.targetrepo }}/terraform/
          fi
          
          git diff --exit-code || echo "Changes detected, committing."
          
          cd ${{ github.event.inputs.targetrepo }}
          git config --global user.email "naresh.reddivari@valuemomentum.com"
          git config --global user.name "nareshreddivari"
          git add .
          git diff --cached --quiet || git commit -m "Added application code from App repo"
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

      # Step: Get the public key for target repo
      - name: Get public key for target repo
        id: get_public_key
        run: |
          # Fetch the public key from GitHub API
          response=$(curl -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -X GET "https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/public-key")
          
          echo "API Response: $response"  # Debugging line to check the response content
          
          # Extract public key and key_id
          public_key=$(echo "$response" | jq -r '.key')
          key_id=$(echo "$response" | jq -r '.key_id')
          
          # Check if public_key and key_id are retrieved correctly
          echo "Public Key: $public_key"  # Debugging line
          echo "Key ID: $key_id"  # Debugging line
          
          # Store the public key and key_id as environment variables
          echo "public_key=$public_key" >> $GITHUB_ENV
          echo "key_id=$key_id" >> $GITHUB_ENV

      - name: Encrypt Azure Credentials
        id: encrypt_azure_credentials
        run: |
          # Check if public_key is empty
          # if [ -z "$public_key" ]; then
          #   echo "Error: Public key is empty."
          #   exit 1
          # fi

          if [ -z "$public_key" ] || [ -z "$key_id" ]; then
          echo "Error: Public key or Key ID not found in API response."
          exit 1
          fi

          # Create the public key file in PEM format
          echo "-----BEGIN PUBLIC KEY-----" > public_key.pem
          
          # Decode and append the public key into PEM format
          echo "$public_key" | base64 --decode > decoded_public_key.bin
          
          # Convert decoded binary key to PEM format and append it
          openssl rsa -in decoded_public_key.bin -inform DER -pubin -out public_key.pem
          
          echo "-----END PUBLIC KEY-----" >> public_key.pem

          # Verify the public key is correctly formatted
          cat public_key.pem
          
          # Define the Azure credentials to encrypt
          azure_credentials='{
            "clientSecret": "QEt8Q~el5WQ8JWv56IsRMvM5mSJeMHsflwyEJbQ7",
            "subscriptionId": "f936a180-7b93-4203-8faa-f376529bd4f8",
            "tenantId": "13085c86-4bcb-460a-a6f0-b373421c6323",
            "clientId": "a2d89136-b086-4755-9f98-af856c2d8c30"
          }'
          
          # Encrypt the Azure credentials using the public key
          encrypted_value=$(echo -n "$azure_credentials" | openssl pkeyutl -encrypt -inkey public_key.pem -pubin | base64)
          
          # Output the encrypted value to the environment variable
          echo "encrypted_value=$encrypted_value" >> $GITHUB_ENV
          echo "key_id=$key_id" >> $GITHUB_ENV

      - name: Trigger pipeline in the application repo
        run: |
          echo "Triggering workflow in target application repo."
          curl -X POST \
            https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/workflows/${{ github.event.inputs.applicationtype }}.yaml/dispatches \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -d '{"ref":"main","inputs":{"appname":"${{ github.event.inputs.appname }}"}}'
