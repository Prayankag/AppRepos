name: Create pipeline in application repo

on:
  workflow_dispatch:
    inputs:
      orgname:
        description: 'The name of the organization repository'
        required: true
        type: string
      targetrepo:
        description: 'The name of the target repository for triggering workflows'
        required: true
        type: string
      applicationtype:
        description: 'The Application type for deployment (dotnet, springboot, terraform)'
        required: true
        type: string
      appname:
        description: 'The Azure Web App name for deployment'
        required: true
        type: string

jobs:
  trigger-workflow:
    runs-on: ubuntu-latest

    steps:
      - name: Create target repository if it doesn't exist
        run: |
          echo "Checking if the repository ${{ github.event.inputs.targetrepo }} exists in ${{ github.event.inputs.orgname }}..."
          
          # Check if repository exists using GitHub API
          repo_exists=$(curl -s -o /dev/null -w "%{http_code}" https://api.github.com/user/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }})
          
          if [ "$repo_exists" != "200" ]; then
            echo "Repository doesn't exist. Creating new repository..."
            
            # Creating new repository via GitHub API
            response=$(curl -s -w "%{http_code}" -o response.json -X POST https://api.github.com/user/repos \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -d '{
              "name": "${{ github.event.inputs.targetrepo }}",
              "description": "This is your target repository",
              "homepage": "https://github.com",
              "private": false,
              "has_issues": false,
              "has_projects": false,
              "has_wiki": false
            }')
      
            # Print the HTTP response code and body for debugging
            echo "Response Code: $response"
            echo "Response Body:"
            cat response.json
            
            # Check if the creation was successful (HTTP status code 201 means created)
            if [ "$response" -eq "201" ]; then
              echo "Repository ${{ github.event.inputs.targetrepo }} created successfully."
            else
              echo "Failed to create repository. Please check the error details."
              cat response.json
            fi
          else
            echo "Repository ${{ github.event.inputs.targetrepo }} already exists."
          fi

      - name: Get public key for secrets encryption
        id: get_public_key
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/public-key)
          echo "::set-output name=key_id::$(echo $response | jq -r .key_id)"
          echo "::set-output name=public_key::$(echo $response | jq -r .key)"

      - name: Set up Python and Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          python3 -m pip install cryptography

      - name: Encrypt AZURE_CREDENTIALS and set it as a secret
        run: |
          python3 -c "
          import os
          from cryptography.hazmat.primitives import hashes
          from cryptography.hazmat.primitives.asymmetric import rsa, padding
          from cryptography.hazmat.primitives import serialization
          import base64

          # Get the secret from the environment variable
          secret = os.getenv('AZURE_CREDENTIALS')

          if not secret:
              raise ValueError('AZURE_CREDENTIALS is missing')

          # The public key fetched from GitHub Secrets API
          public_key_pem = '''${{ steps.get_public_key.outputs.public_key }}'''  # Public key as fetched from GitHub API
          
          # Load the public key using serialization.load_pem_public_key
          public_key = serialization.load_pem_public_key(
              public_key_pem.encode('utf-8')
          )
          
          # Encrypt the secret with the public key
          encrypted = public_key.encrypt(
              secret.encode(),
              padding.OAEP(
                  mgf=padding.MGF1(algorithm=hashes.SHA256()),
                  algorithm=hashes.SHA256(),
                  label=None
              )
          )
          
          # Base64 encode the encrypted secret for safe transport
          encrypted_secret = base64.b64encode(encrypted).decode('utf-8')
          print(encrypted_secret)
          " 
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Set GitHub Secret with encrypted AZURE_CREDENTIALS
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/AZURE_CREDENTIALS \
            -d "{\"encrypted_value\":\"$encrypted_secret\",\"key_id\":\"${{ steps.get_public_key.outputs.key_id }}\"}"

      - name: Set up secrets for the new target repository
        run: |
          echo "Setting up secrets for the target repository..."
          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/AZURE_CREDENTIALS \
            -d '{"encrypted_value":"${{ secrets.AZURE_CREDENTIALS }}","key_id":"${{ steps.get_public_key.outputs.key_id }}"}'

          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/secrets/GITHUB_TOKEN \
            -d '{"encrypted_value":"${{ secrets.GITHUB_TOKEN }}","key_id":"${{ steps.get_public_key.outputs.key_id }}"}'

          echo "Secrets set up completed."

      - name: Checkout AppRepos
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.orgname }}/AppRepos
          token: ${{ secrets.GIT_PAT }}  # Personal Access Token (PAT)
          ref: main

      - name: Clone the target repository
        run: |
          # Ensure that git is available
          git --version

          # Clone the target repository into the directory you want
          git clone https://github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git
          
          # Navigate into the cloned repository
          cd ${{ github.event.inputs.targetrepo }}
          
          # List the contents of the cloned repository
          echo "Contents of the cloned repository:"
          ls -R .

      - name: List files in the app repo
        run: |
          echo "Listing files in the app repo"
          ls -R .  # List all files in the current directory (root of the checked-out repo)

      - name: List files in the app repo's workflows directory
        run: |
          echo "Listing files in the app repo's workflows directory"
          ls -R ${{ github.event.inputs.targetrepo }}/.github/workflows || echo "Directory not found"

      - name: Create .github/workflows directory in app repo if it doesn't exist
        run: |
          if [ ! -d "${{ github.event.inputs.targetrepo }}/.github/workflows" ]; then
            echo "Creating .github/workflows directory."
            mkdir -p ${{ github.event.inputs.targetrepo }}/.github/workflows
          fi

      - name: Check if the required YAML file exists in the app repo
        run: |
          echo "Checking for ${{ github.event.inputs.applicationtype }}.yaml"
          if [ ! -f ".github/workflows/${{ github.event.inputs.applicationtype }}.yaml" ]; then
            echo "Error: ${{ github.event.inputs.applicationtype }}.yaml does not exist in the app repo!"
            exit 1
          fi

      - name: Copy the application workflow YAML file to app repo
        run: |
          echo "Copying the application workflow YAML to the app repo."
          cp .github/workflows/${{ github.event.inputs.applicationtype }}.yaml ${{ github.event.inputs.targetrepo }}/.github/workflows/
          git diff --exit-code || echo "Changes detected, committing."
          
          cd ${{ github.event.inputs.targetrepo }}
          git config --global user.email "naresh.reddivari@valuemomentum.com"
          git config --global user.name "nareshreddivari"
          git add .github/workflows/${{ github.event.inputs.applicationtype }}.yaml
          
          git diff --cached --quiet || git commit -m "Added ${{ github.event.inputs.applicationtype }}.yaml from App repo"
                    
          # Use PAT for git push
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

      - name: Copy application code to the app repo (based on application type)
        run: |
          # Ensure the folder path is created in the target repository
          if [ "${{ github.event.inputs.applicationtype }}" == "dotnet" ]; then
            echo "Copying .NET (calculator) code to the app repo."
            
            # Debug: Check the current working directory
            echo "Current directory:"
            pwd
      
            # Debug: List contents of the current directory
            echo "Listing contents of the current directory:"
            ls -l
          
            # Ensure you're in the correct directory (AppReposRepos is already included in GITHUB_WORKSPACE)
            cd $GITHUB_WORKSPACE  # No need to go into AppReposRepos again since it's already in the path
      
            # Check if the calculator folder exists in the correct path and list its contents
            if [ -d "./calculator" ]; then
              echo "Listing contents of the calculator folder (before copy):"
              mkdir -p ${{ github.event.inputs.targetrepo }}/calculator
              ls -l ./calculator
              cp -r ./calculator/* ${{ github.event.inputs.targetrepo }}/calculator/
            else
              echo "calculator folder does not exist in the expected location. Skipping copy."
            fi
      
            # Check if calculator.sln file exists in AppRepos root and copy it
            if [ -f "./calculator.sln" ]; then
              echo "calculator.sln file exists, copying to app repo."
              cp ./calculator.sln ${{ github.event.inputs.targetrepo }}/calculator.sln
            else
              echo "calculator.sln file does not exist, skipping copy."
            fi
          
          elif [ "${{ github.event.inputs.applicationtype }}" == "springboot" ]; then
            echo "Copying Spring Boot code to the app repo."
            # Change to the correct directory (AppRepos without the extra "AppRepos")
            cd $GITHUB_WORKSPACE  # No need to change directory here either
          
            # Create the springboot folder if it doesn't exist
            mkdir -p ${{ github.event.inputs.targetrepo }}/springboot
            # Copy the Spring Boot code from AppRepos to the target repo
            cp -r ./springboot/* ${{ github.event.inputs.targetrepo }}/springboot/
          
          elif [ "${{ github.event.inputs.applicationtype }}" == "terraform" ]; then
            echo "Copying Terraform code to the app repo."
            # Change to the correct directory (AppRepos without the extra "AppRepos")
            cd $GITHUB_WORKSPACE  # No need to change directory here either
          
            # Create the terraform folder if it doesn't exist
            mkdir -p ${{ github.event.inputs.targetrepo }}/terraform
            # Copy the Terraform code from AppRepos to the target repo
            cp -r ./terraform/* ${{ github.event.inputs.targetrepo }}/terraform/
          fi
          
          git diff --exit-code || echo "Changes detected, committing."
          
          cd ${{ github.event.inputs.targetrepo }}
          git config --global user.email "naresh.reddivari@valuemomentum.com"
          git config --global user.name "nareshreddivari"
          git add .
          
          git diff --cached --quiet || git commit -m "Added application code from App repo"
          
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

          # Use PAT for git push
          git push https://${{ secrets.GIT_PAT }}@github.com/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}.git main || echo "No changes to push."

      - name: Trigger pipeline in the application repo
        run: |
          echo "Triggering workflow in target application repo."
          curl -X POST \
            https://api.github.com/repos/${{ github.event.inputs.orgname }}/${{ github.event.inputs.targetrepo }}/actions/workflows/${{ github.event.inputs.applicationtype }}.yaml/dispatches \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: Bearer ${{ secrets.GIT_PAT }}" \
            -d '{"ref":"main","inputs":{"appname":"${{ github.event.inputs.appname }}"}}'
